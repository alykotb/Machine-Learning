{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "A61_ZBXJgOSh"
      },
      "source": [
        "## Assignment 1.a Linear Regression\n",
        "<br> \n",
        "In this notebook, a linear regression model is built to predict Facebook's stock value. Stock data including date, open, high, low, close and value columns are provided in the FB.csv file.\n",
        "<br> \n",
        "The value of the \"date\" column starts with \"2012-05-18\" and ends with \"2019-10-22\". The \"close\" column contains the stock value at the closing. You must add an \"index\" column with value 0,1,2,3,... to this file. In other words,there should be an index value against each date as 0 for the date \"2012-05-18\", 1 for the date \"2012-05-19\", 2 for the \"2012-05-20\" and n (data size) for the \"2019-10-22\". The linear regression model is trained so that the \"index\" column is input and the \"close\" column is output."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GX6GzlDNgOSk"
      },
      "source": [
        "## Data preperation"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "pycharm": {
          "is_executing": false
        },
        "id": "bhEMj_rXgOSl"
      },
      "outputs": [],
      "source": [
        "# Import necessary modules\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "# import seaborn as sns\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "pycharm": {
          "is_executing": false
        },
        "id": "LuWvhn90gOSm",
        "outputId": "d053e9f0-4a66-4e3f-cd7c-7e585847461b"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>open</th>\n",
              "      <th>high</th>\n",
              "      <th>low</th>\n",
              "      <th>close</th>\n",
              "      <th>volume</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2012-05-18</td>\n",
              "      <td>42.05</td>\n",
              "      <td>45.00</td>\n",
              "      <td>38.00</td>\n",
              "      <td>38.2318</td>\n",
              "      <td>573576400</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2012-05-21</td>\n",
              "      <td>36.53</td>\n",
              "      <td>36.66</td>\n",
              "      <td>33.00</td>\n",
              "      <td>34.0300</td>\n",
              "      <td>168192700</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2012-05-22</td>\n",
              "      <td>32.61</td>\n",
              "      <td>33.59</td>\n",
              "      <td>30.94</td>\n",
              "      <td>31.0000</td>\n",
              "      <td>101786600</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2012-05-23</td>\n",
              "      <td>31.37</td>\n",
              "      <td>32.50</td>\n",
              "      <td>31.36</td>\n",
              "      <td>32.0000</td>\n",
              "      <td>73600000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2012-05-24</td>\n",
              "      <td>32.95</td>\n",
              "      <td>33.21</td>\n",
              "      <td>31.77</td>\n",
              "      <td>33.0300</td>\n",
              "      <td>50237200</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         date   open   high    low    close     volume\n",
              "0  2012-05-18  42.05  45.00  38.00  38.2318  573576400\n",
              "1  2012-05-21  36.53  36.66  33.00  34.0300  168192700\n",
              "2  2012-05-22  32.61  33.59  30.94  31.0000  101786600\n",
              "3  2012-05-23  31.37  32.50  31.36  32.0000   73600000\n",
              "4  2012-05-24  32.95  33.21  31.77  33.0300   50237200"
            ]
          },
          "execution_count": 2,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Load the data (facebook stock data stored in FB.csv)\n",
        "FB_Data = pd.read_csv(\"FB.csv\", thousands=',')\n",
        "\n",
        "\n",
        "# Print the data table.\n",
        "FB_Data.head(5)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "pycharm": {
          "is_executing": false
        },
        "id": "N3NDLEzfgOSn",
        "outputId": "ea2d9a11-cdc9-4430-d038-71180e33c784"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "0          0\n",
            "1          1\n",
            "2          2\n",
            "3          3\n",
            "4          4\n",
            "        ... \n",
            "1864    1864\n",
            "1865    1865\n",
            "1866    1866\n",
            "1867    1867\n",
            "1868    1868\n",
            "Name: indexed_input, Length: 1869, dtype: int32\n"
          ]
        }
      ],
      "source": [
        "#Add an integer value for each date such as 0,1,2,3,....\n",
        "#you can add new column such as data['indexed_input']\n",
        "#you can use \"range(0, len(data))\" for data['indexed_input'] \n",
        "\n",
        "\n",
        "indexed_input = np.array(range(len(FB_Data)))\n",
        "\n",
        "FB_Data['indexed_input'] = indexed_input\n",
        "\n",
        "print(FB_Data['indexed_input'])\n",
        "\n",
        "# FB_Data['open'].head(4)\n",
        "\n",
        "# len(FB_Data)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Kv-CGIuOgOSo",
        "outputId": "fd588405-1346-45a2-dfa9-30e502dea8ec"
      },
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>date</th>\n",
              "      <th>close</th>\n",
              "      <th>indexed_input</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2012-05-18</td>\n",
              "      <td>38.2318</td>\n",
              "      <td>0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2012-05-21</td>\n",
              "      <td>34.0300</td>\n",
              "      <td>1</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2012-05-22</td>\n",
              "      <td>31.0000</td>\n",
              "      <td>2</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2012-05-23</td>\n",
              "      <td>32.0000</td>\n",
              "      <td>3</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2012-05-24</td>\n",
              "      <td>33.0300</td>\n",
              "      <td>4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1864</th>\n",
              "      <td>2019-10-16</td>\n",
              "      <td>189.5500</td>\n",
              "      <td>1864</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1865</th>\n",
              "      <td>2019-10-17</td>\n",
              "      <td>190.3900</td>\n",
              "      <td>1865</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1866</th>\n",
              "      <td>2019-10-18</td>\n",
              "      <td>185.8500</td>\n",
              "      <td>1866</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1867</th>\n",
              "      <td>2019-10-21</td>\n",
              "      <td>189.7600</td>\n",
              "      <td>1867</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1868</th>\n",
              "      <td>2019-10-22</td>\n",
              "      <td>182.3400</td>\n",
              "      <td>1868</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1869 rows × 3 columns</p>\n",
              "</div>"
            ],
            "text/plain": [
              "            date     close  indexed_input\n",
              "0     2012-05-18   38.2318              0\n",
              "1     2012-05-21   34.0300              1\n",
              "2     2012-05-22   31.0000              2\n",
              "3     2012-05-23   32.0000              3\n",
              "4     2012-05-24   33.0300              4\n",
              "...          ...       ...            ...\n",
              "1864  2019-10-16  189.5500           1864\n",
              "1865  2019-10-17  190.3900           1865\n",
              "1866  2019-10-18  185.8500           1866\n",
              "1867  2019-10-21  189.7600           1867\n",
              "1868  2019-10-22  182.3400           1868\n",
              "\n",
              "[1869 rows x 3 columns]"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "# Since we only use \"indexed_input\" and \"close\" colums\n",
        "# Drop columns other than \"indexed_input\" and \"close\"\n",
        "# You may want to keep \"date\" as well\n",
        "'''\n",
        "The output can be following :\n",
        "0 \t2012-05-18 \t38.2318 \t0\n",
        "1 \t2012-05-21 \t34.0300 \t1\n",
        "2 \t2012-05-22 \t31.0000 \t2\n",
        "'''\n",
        "FB_Data.drop(['open', 'volume','high','low'], axis = 1)\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "pycharm": {
          "is_executing": false
        },
        "id": "JHAIM2SmgOSo",
        "outputId": "69835f43-418f-4ab8-9308-b93ba4d7b2c5"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "[ 889 1825 1803 ...  263  775 1400]\n",
            "374\n"
          ]
        }
      ],
      "source": [
        "# Split data set on training and test sets with proportions 80/20.\n",
        "# It would be better to use function sample() which returns a random sample of items.\n",
        "\n",
        "train_sample = FB_Data.sample(frac=0.8) \n",
        "test_sample  = FB_Data.drop(train_sample.index)\n",
        "\n",
        "print(train_sample['indexed_input'].values)\n",
        "\n",
        "print(len(test_sample))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ISKedK1TgOSp",
        "outputId": "1feddf92-52b4-479b-d17f-4a5f18000eab"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "# Plot training and testing datasets.\n",
        "x_test = test_sample['indexed_input'].values\n",
        "y_test = test_sample['close'].values\n",
        "l = len(y_test)\n",
        "plt.scatter(x_train,y_train,c='blue',marker = '+')\n",
        "plt.xlabel('x_test')\n",
        "plt.ylabel('y_test')\n",
        "plt.title('Scatter Plot of Testing Data')\n",
        "plt.show()\n",
        "\n",
        "x_train = train_sample['indexed_input'].values\n",
        "y_train = train_sample['close'].values\n",
        "l = len(y_train)\n",
        "plt.scatter(x_train,y_train,c='red',marker = 'x')\n",
        "plt.xlabel('x_train')\n",
        "plt.ylabel('y_train')\n",
        "plt.title('Scatter Plot of Training Data')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "#############Plotting training and test datasets together###################\n",
        "\n",
        "x_train = train_sample['indexed_input'].values\n",
        "y_train = train_sample['close'].values\n",
        "l = len(y_train)\n",
        "plt.scatter(x_train,y_train,c='red',marker = 'x')\n",
        "plt.xlabel('x_train')\n",
        "plt.ylabel('y_train')\n",
        "plt.title('Scatter Plot of Training and Test Data')\n",
        "\n",
        "\n",
        "x_test = test_sample['indexed_input'].values\n",
        "y_test = test_sample['close'].values\n",
        "l = len(y_test)\n",
        "plt.scatter(x_train,y_train,c='blue',marker = '+')\n",
        "plt.xlabel('x_test')\n",
        "plt.ylabel('y_test')\n",
        "plt.title('Scatter Plot of Training and Test Data')\n",
        "plt.show()\n",
        "\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_2qf_hjXgOSq"
      },
      "source": [
        "## LinearRegression model from scrach\n",
        " \n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GUOZK7Q7gOSq"
      },
      "outputs": [],
      "source": [
        "# Define cost function\n",
        "def linearRegressionCost(X,y,theta):\n",
        "    \n",
        "    m = len(y)\n",
        "    h= X@theta\n",
        "    cost = 1/(2*m)*(np.sum((h-y)**2))\n",
        "    return cost\n",
        "    \n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "gH9mAlqDgOSr"
      },
      "outputs": [],
      "source": [
        "# Define gradient decent function\n",
        "def linearRegressionGradientDescent(X,y,theta,alpha,num_iter):\n",
        "    J_history = []\n",
        "    thetas = []\n",
        "    m = len(y)\n",
        "    for i in range(num_iter):\n",
        "        h = X.dot(theta)\n",
        "        grad = (1/m)*(X.T.dot(h-y))\n",
        "        theta = theta - (alpha*grad)\n",
        "        cost = linearRegressionCost(X,y,theta)\n",
        "        thetas.append(theta)\n",
        "        J_history.append(cost)\n",
        "    \n",
        "    return theta,thetas,J_history   "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "OoW3gDa_gOSr"
      },
      "outputs": [],
      "source": [
        "# initlize the theta\n",
        "# prepare x_train and y_train\n",
        "# do not forget to append bias terms\n",
        "# reshape and normolize your train and test dadaset\n",
        "\n",
        "x_train = x_train/1000\n",
        "y_train = y_train/1000\n",
        "\n",
        "\n",
        "x_train = np.append(np.ones([x_train.shape[0],1]),x_train.reshape(x_train.shape[0],1),axis=1)\n",
        "y_train = y_train.reshape(x_train.shape[0],1)\n",
        "\n",
        "# print(y_train.shape)\n",
        "\n",
        "theta = np.zeros([x_train.shape[1],1])\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "yAVCxvKPgOSs"
      },
      "outputs": [],
      "source": [
        "# train your model and collect theta and cost function outputs for each iteration\n",
        "theta,thetas,J_history = linearRegressionGradientDescent(x_train,y_train,theta,0.3,800)\n",
        "# print(J_history)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Y-yLq8M7gOSs",
        "outputId": "3efe4c1f-adbf-47f4-f036-3df65e79e2df"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "#plot the cost function\n",
        "plt.plot(J_history[0:800])\n",
        "plt.xlabel(\"Iteration\")\n",
        "plt.ylabel(\"$J(\\Theta)$\")\n",
        "plt.title(\"Cost function using Gradient Descent\")\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "F0UK0-KcgOSs"
      },
      "outputs": [],
      "source": [
        "# predict the test datasets\n",
        "def predcit(X,y,theta):\n",
        "    \n",
        "    prediction = X.dot(theta)\n",
        "    return prediction\n",
        "\n",
        "\n",
        "# x_test,X_mean, X_std = featureNormalization(x_test)\n",
        "# y_test,y_mean, y_std = featureNormalization(y_test)\n",
        "\n",
        "\n",
        "   \n",
        "\n",
        "x_test = np.append(np.ones([x_test.shape[0],1]),x_test.reshape(x_test.shape[0],1),axis=1)\n",
        "y_test = y_test.reshape(x_test.shape[0],1)\n",
        "# print(x_test.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "XDYlIIgzgOSt",
        "outputId": "f562d5d2-e70c-4547-e1e3-86407e85545c"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "(374, 1)\n"
          ]
        }
      ],
      "source": [
        "predictions = predcit(x_test,y_test,theta)\n",
        "print(predictions.shape)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ade1wAMagOSt",
        "outputId": "425009c1-f787-4d29-b539-c84c5c60affc"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "#plot the test dataset real points and the predictions\n",
        "predictions = predictions.reshape(1,374)\n",
        "x_test = test_sample['indexed_input'].values\n",
        "y_predictions = predictions\n",
        "l = len(y_train)\n",
        "plt.scatter(x_test,y_predictions,c='red',marker = 'x')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.title('Predictions vs Real')\n",
        "\n",
        "# x_test = test_sample['indexed_input'].values\n",
        "# y_test = test_sample['close'].values\n",
        "\n",
        "plt.scatter(x_test,y_test,c='blue',marker = '+')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.title('Predictions vs Real')\n",
        "plt.show()\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "qXlw1i9cgOSt"
      },
      "source": [
        "## Scikit-learn Linear Regression model\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fsGsB30RgOSt"
      },
      "outputs": [],
      "source": [
        "import sklearn.linear_model \n",
        "from sklearn.linear_model import LinearRegression\n",
        "\n",
        "x_train = train_sample['indexed_input'].values\n",
        "y_train = train_sample['close'].values\n",
        "\n",
        "x_test = test_sample['indexed_input'].values\n",
        "y_test = test_sample['close'].values\n",
        "\n",
        "x_train = np.append(np.ones([x_train.shape[0],1]),x_train.reshape(x_train.shape[0],1),axis=1)\n",
        "y_train = y_train.reshape(x_train.shape[0],1)\n",
        "\n",
        "x_test = np.append(np.ones([x_test.shape[0],1]),x_test.reshape(x_test.shape[0],1),axis=1)\n",
        "y_test = y_test.reshape(x_test.shape[0],1)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Onf7PfyJgOSu"
      },
      "outputs": [],
      "source": [
        "# Use sklearn.linear_model.LinearRegression() as your model\n",
        "# train the model and predict test dataset\n",
        "\n",
        "model = LinearRegression()\n",
        "\n",
        "model.fit(x_train,y_train)\n",
        "precitions = model.predict(x_test)\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "J_PGnvwCgOSu",
        "outputId": "db780198-45e4-4bfc-921c-73245d75cdf0"
      },
      "outputs": [
        {
          "data": {
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYUAAAEWCAYAAACJ0YulAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8/fFQqAAAACXBIWXMAAAsTAAALEwEAmpwYAAA6xUlEQVR4nO2dfXicdZnvP3fTl0DTJm0DpSBQFBRYaEcIL2ogw76AuIiuew7q7rW+y7rSoqjrcdcj7YLu6lkRbIsiLp51zxFFXV1ZF3BZ7USj0BcgfQHxANJKS0ub0oSm0NIk9/njfn6ZZybzTCZtJjOTuT/XlWtmnnnmmV+mze8797uoKo7jOI4DMKXSC3Acx3GqBxcFx3EcZxgXBcdxHGcYFwXHcRxnGBcFx3EcZxgXBcdxHGcYFwVnUiIi/ywin43uXyQivznM69wmIp8Z39XVLiKyUERURKZWei1OeXBRcCqGiGwRkZdEpF9Enos28qbxfh9V/YWqvqaE9bxHRLryXvshVb1xvNdUbkQkIyIHos+2R0R+ICILKr0up/pxUXAqzZtVtQk4B2gD/mf+Cf6t9LBZEn22pwJNwBcrvB6nBnBRcKoCVd0O3AucBRC5KK4RkSeAJ6JjV4hIt4j0isivRGRReL2IvFZEHhaRfSJyF9AYey4tIttij0+MvjnvFpE9IrJKRM4AbgNeF3277o3OHXZDRY8/KCJPisjzInK3iBwfe05F5EMi8kS0xltFRKLnThWRThHpi76531XocxCRe0VkSd6xDSLyNjFuFpFdIvKCiGwSkbNK+Gx7gX8DUrFrni4i90e/x29E5KrYc38sIo9E7/GMiCwf7T2cyYOLglMViMiJwJuAR2KH3wpcAJwpIq8FvgH8JTAP+Bpwt4jMEJHp2Kb3f4C5wPeAP014nwbgx8BWYCFwAvAdVf018CHgAVVtUtWWAq/9feAfgKuABdE1vpN32hXAecCi6LzLouM3Av8JzAFeAaxM+Ci+Dbwz9p5nAicD/wFcClwMvBpojq6/J+E68XXPA94GPBk9ngncD9wJHAu8A/hK9F4A+4F3AS3AHwN/JSJvHe19nMmBi4JTaf4t+lbeBXQCfx977h9U9XlVfQm4Gviaqq5R1UFV/SZwELgw+pkG3KKqh1T1+8C6hPc7Hzge+GtV3a+qB1S1K+HcfP4c+IaqPqyqB4G/wSyLhbFzPq+qvar6O2A12W/nh7DN/fhR3vOHQEpETo695w+i9zsEzAJOB0RVf62qO4qsd4WI9AE9QCuwNDp+BbBFVf+3qg6o6iPAvwL/HUBVM6q6SVWHVHUjJlQdJXw+ziTARcGpNG9V1RZVPVlVPxwJQOCZ2P2TgY9HbpneSEhOxDb444HtmtvdcWvC+50IbFXVgcNY6/Hx66pqP/ZN/YTYOTtj91/EfPkAnwQEWCsij4rI+wq9garuw6yCd0SH3gl8K3ruZ8Aq4FZgl4jcLiKzi6z3WlVtxqyWYKGAfZYX5H2Wfw4cByAiF4jI6si91odZUK1F3seZRLgoONVMfJN/BvhcJCDh52hV/TawAzgh+O8jTkq45jPASQnB69FaBj+LbajAsBtmHrB91F9EdaeqflBVj8dcYF8RkVMTTv828E4ReR0WG1kdu84KVT0XOBNzI/11Ce+9CfgsEGIczwCdeZ9lk6r+VfSSO4G7gRMjUbkNEzSnDnBRcGqFrwMfir7FiojMjAKis4AHgAHgWhGZJiJvw9xEhViLicjno2s0isgboueeA14RxSgK8W3gvSKSEpEZmKtrjapuGW3xIvLfRSR8U9+LCdBQwun3YOJzA3CXqg5F1zgv+v2nYX7/A0Wukc83gfnAlVhM5dUi8hfR5zUtuvYZ0bmzgOdV9YCInA/8WYnv4UwCXBScmkBV1wMfxNwne7Gg6Xui517GAqnvAZ4H3g78IOE6g8CbsTTN3wHbovMBfgY8CuwUkZ4Cr/0v4DOY/30H8Cqybp7ROA9YIyL92Lfwj6jqbxPWeDBa/x9i39oDszFx3Iu5sfYA/1jKm0ef0ZeBz0QuqkujtT+Luby+AMyITv8wcIOI7AOuB75b4u/oTALEh+w4juM4AbcUHMdxnGFcFBzHcZxhXBQcx3GcYVwUHMdxnGFqutFYa2urLly4sNLLcBzHqSkeeuihHlU9ptBzNS0KCxcuZP369ZVehuM4Tk0hIkkV/+4+chzHcbK4KDiO4zjDuCg4juM4w7goOI7jOMO4KDiO4zjDuCg4jjOpSaftxykNFwXHcSY93d0uDKVS03UKjuM4SQQR6Oy02yAMmUxl1lMruKXgOM6kpbs7e7+vzy2GUnBRcBxnUpLJQCoFDQ3ZY6lUhRZTQ7goOI4zKQkWweCg3TY32627j4rjouA4zqQl7j5ySsNFwXGcSUlwHzU3Q0cH9Pa6lVAKnn3kOM6ko6XFbvv67NYzj0qnbJaCiJwoIqtF5DEReVREPhIdnysi94vIE9HtnOi4iMgKEXlSRDaKyDnlWpvjOPVFrQSYq6HQrpyWwgDwcVV9WERmAQ+JyP3Ae4CfqurnReRTwKeA/wFcDpwW/VwAfDW6dRzHKYmwoQYLoaEBmprcQhgLZRMFVd0B7Iju7xORXwMnAG8B0tFp3wQymCi8BfgXVVXgQRFpEZEF0XUcx3HGzOAg9PdXehWjk19oFx5XQswmJNAsIguB1wJrgPmxjX4nMD+6fwLwTOxl26Jj+de6WkTWi8j63bt3l2/RjuPUHGETDemnYJZCpV0ytUTZA80i0gT8K/BRVX1BRIafU1UVER3L9VT1duB2gLa2tjG91nGc+iBuHcQrmavVjRTWVUkLIVBWS0FEpmGC8C1V/UF0+DkRWRA9vwDYFR3fDpwYe/kromOO4zglk8lAe3t1VTK3tGQzoqqdcmYfCXAH8GtV/VLsqbuBd0f33w38KHb8XVEW0oVAn8cTHMcZK9VYydzfX1psI5OpvDVTTvfRG4C/ADaJSHd07G+BzwPfFZH3A1uBq6Ln7gHeBDwJvAi8t4xrcxxnkpJfxVzJQHOwDoJAhce9vcmvqbQLqZzZR12AJDz9BwXOV+Cacq3HcZz6oqPDBCKVqtwGmy9ItZAJ5RXNjuNMCvJrFLq67Bt6Z2flvn03NeWuKTwOxNdValpquX8X733kOE5VkU6bm2WsaaTd3dXXAC+Vyg1y5z8+XMo5F8ItBcdxJgVhsw3ftNvbK+8+Cu8bYgn5qaeFrIJ0OitucQsiMGKS3GoFSfLUjx23FBzHqQrSaZg61Ta9vj67HYvFEN/4GxqyXVKrgcO1EOICAdD94EvD963+Qkmf+BQsX35kC4zhloLjODVP/uY5OFj5LJ44+RZCEvG4SGeniVuIizRLH/06M/cFfX3Qt83SmXR8LAYXBcdxKk5+bUEoPCvV9dPdbZk94fXhWLVYCvnkxz7C41RqpLgF+nUmTfTTRwsAzfSSoptM4+XwxX3j5kJyUXAcp2bJzzgKNDdXNpaQT34MId6bCbLiFWIIXV0Kg4MMxrboJvpJ0U03KfppMkHgEnjhZfO7jRMeU3Acp+KESt6ODtsw29tz00knW0O7EGNobrafrHtJ6eyEwUFhkAYg294txYbh+030myAA/PVfm+tonHBLwXGcmqBQjCA/uydYDNXmNkpqeJcjdluehh07gNfnvDa4iQLBfZRmNcgUMl/usCduvtljCo7j1C7FNvlCzxezFvJFoFrcRlA84D18bNkyMi/dRvrlu2hgIHIb2QbfTxPdpHKEAQCZAjoEjY0we7bHFBzHqT0OJyOolErfUrN7Kk3O7x2yhVQte2iXNYw2t1GB13IJiJBuH4Df/pbM9g4ThGOOgRtuGLc1uig4jjNhhCyhlpasq6elpXBQ+HA2+mqzELq7s7/nsJitVqsr6O2FW26xgzfdBJ2dZDZcQprVdJMadhO102XnNDaSPnAv3b/cT6r9VfDfPgKzZsGNN47rul0UHMcpO/lZQvnZQsUYbQBNNdUjjMqWp+EV7WYVDAyYlaAKd9wBL1lhWgYThi7acwPKB4Cp00jNfJJM52tBxyeGkI+LguM4ZadYT6IwGa2lpXhL6VoiXwSbm4EtT5Npfivpjd/KnriS7KYfIwjD8PVYDdOm03no9dAXri9lEUIXBcdxJoTDaRud7zoqFIiuhmH3hejqij048BL07IGtG2HmTNi/P/mFRx0Fp51GZuMl2ceD02HBAptAU2ZcFBzHKTupVN4mGREql0f43TPlXU+53yeTgZYWpb9vkHb5FZmrv0965dtIz1xH5/623LVEFkFm/jvgqquyqaXXXQcPPgiXXUbm715nQeYyrxtcFBzHKTNJLSziswXyYwz5VkD+8fjYyvwOpJWmpUXhwAH6Dh4FTKVLX0/LykWkZj4B+4uYS889Z7dTppgohCB0GeIGxXBRcBxn3Ilv3knxhHjGUak1CUc6L6GsLidVu2Dfj7Aag6MAqz4GyOw/nzSrY3UIRk4Nwne/a2IgUlAMJkL4XBQcxzli4ptrS4vFD9rb7VihOQfh3KTNPzwXehgVe89SXU8hRbQs1c7LlsE995Duvnm4J1ELewHoZU7x106ZAg3TYNrRcPrp9riCuCg4jnPEhG/w6XS2W2lnp/Vpa2qyrKJibp7RvgGH68cF4HA2+GCdjJeFkE4rdHeTefkfSb90D92cRWrqZhgofH6GS2DaNNLHPEr3s8dYeunH7o7mIeyruCCAi4LjOEdA/rf1/BhAvPVzfAMv5sZJiiekUrnHSt3gC73XEVsMQ0NwySXwwN+DQnrgnuGCs86BdtKsznYxjSMChw5Zj6PpJ0DrvHGtRh4PXBQcxzlsSvHx9/UlVy2Xynh/w89fy5iu29FBuutG0Bvp1DcAFI8TgPnB+vos7tDQQGbmm818klOO6PcoBy4KjuMcNvnxgo6Okd/wC1GsSnm0Cuakax3Oe42JwUFz82zebJZCjPjwmwYGslbCjBlw8KAJwrx5cOqp8Id/CJ/97GEuovy4KDiOc9gUSgsN817a27NumvHKmjnsb/cJlJSNpAoLF1pritNPh+eft19yIDdwEKyFQabSTYoW9tJ7cA7MnWvC8Hu/Zxee4BTTseKi4DjOERHPIEqns3GE0PyuGMU29PFOv0y6XqILTKPGdffcYzUEBw/aya2t0JMQSY7oo5kGBmH+fPjgB+Hv/q4qgsil4KLgOM4RUyhoGx8xOZ6MZ61BiFPkWDSqsGw53HefCcGGDXbylCnmNurpGQ4gD1cjx5rYAcMWQ7rxAfjFKWRqQw8AFwXHcQ6T/M25oyP3tloqjJPIX393N6QXbiEz/+25YjBvHuzZMyKOEOiifbgmwWYhZN1DXdtOoam3LMsvGy4KjuPUFOMVOB7pNlIYOARr19rDxYtNGPbsSV7LWUuZuvkR+mgmLgaBpqbqGw06Gi4KjuMcFuOW1VMhUino7lZra33gIKmmbWS2vhKuWworV2YthUJMnUrLwG7YTE4qKmSzT5uba7MVuIuC4zg1yeGKkImY0tkp2Ld7BRrp3H4q6eb18PLbybCy8IuDKynKPOqnqeBpxdpzVDsuCo7jHBa1aiGw5Wm6t7UCs6IDMbdPUhfT1lbo6TFBWLwYGhvp/aObSP/iBrq6shlXQQxq7jOJ4aLgOE79sGwZmZYfkd56S84c5GZ6gbwpaPPnw3HHmRupp2dYDLjsMktVFSFDbgPAWhaDgIuC4zhjotonnhVE1W77+mDDBjKLP0p6wy0j21HECQNvPvYxWLMmRwzi9PYmd3utRVwUHMepKcYkQkNDVjjW12cb/E03mUCsWJEzBznHQli0yPJqV6602oQwCa1IJXJVC+IYcVFwHGdM1ETWUehi+vjjcPzxln86NGTmzRNPDJ+WIwYhbrBxownAtdeab6hGKpHHCxcFx3HGRKVcJSW5rQYH4fd/H375S7MIhoasZ9GMGfbNvxCNjXDgAPT0kJ65Fl4+RKblb7MT0OoMFwXHcUoibMJdXXY7ULz9z8Rz8snWo+joo3MHOYBVKMeZPx/e/nYTjpUrs0Hkna3W/K4qzZ+JwUXBcZxRSaftG3pDQ3a/nWj3UaGOrIBt7BdfDNu2mWVw8CDMmQN79yZfLASRRWDKFNL/9hFYuJDOrQJbq9w1VmZcFBzHKUjcTRRaQsS/gAeRqCjLltnm399vghCa1hUThMWLc4PIN98M3fXnJkqibKIgIt8ArgB2qepZ0bHlwAeB3dFpf6uq90TP/Q3wfmAQuFZVf1KutTmOUxrxwqxCNBUu6C0L+aM/0y2PwP5LyQy0w5IldrDYKDgRsyo2bLAKs+bm4ZhBfvC8nimnpfDPwCrgX/KO36yqX4wfEJEzgXcAvwccD/yXiLxaVYv8d3QcpxwkzUhOoqVlInv8KMMVyAOD1sCutRVWrUp+yfTp8PLLJghTpsCCBXDllZaq6oygbKKgqj8XkYUlnv4W4DuqehB4WkSeBM4HHijX+hzHSaaU2csw+hCdcUOVjKahr4/0Cd+D7dvJvPdf4Z/+CXoOFH/tyy9bjGHfPhOErVtHzSoarTBvxAyGSUQlEnCXiMhGEfmGiMyJjp0APBM7Z1t0bAQicrWIrBeR9bt37y50iuM4R0AmY5tdUryguTl7v6lpAlxIy5bBBRfAY4+Z66e3D2Y2mXVwoIAgLFoEZ59t96dMgVmzzL104AD87nd1mWY6FiY60PxV4EbMBrwRuAl431guoKq3A7cDtLW16Xgv0HGc7ESykH4ab/gWp2ydQENbiuXL4Uc/yraxbm0l03Ne8uuam634bOlSU7WmJvj5z0sWgtEK84KFEOIanZ3mPptMFsOEioKqPhfui8jXgR9HD7cDJ8ZOfUV0zHGcCpHJZJu9BYIIBPfSuG+EYS7yffeZdSBighBaVvf0FH7dkiW2+W/caDGGOXPgoYfqrhp5PJhQURCRBaq6I3r4J8Dm6P7dwJ0i8iUs0HwasHYi1+Y4zkhCADn/m3NZsnSWLTMx2LLFqpDXrjVX0FFHJU8/a2yE97/fXElLl5oIzJ59xEHkJLGL//5dXWaI1OIgnWKUMyX120AaaBWRbcAyIC0iKcx9tAX4SwBVfVREvgs8BgwA13jmkeNUjtGKt8bVQgjWQdxNFNi4Mfl1wXro6rI+RRNkHQQX0uCguZEmW6FbObOP3lng8B1Fzv8c8LlyrcdxnNFJsgDKsuGp2jf6UGi2YUN2LnIxzj4bNm0yQWhttThCGfoUxTf7/I0/lSo9ZbfW8Ipmx3GGCbGC4QKxtN2OuyiESmQRWLHCXD+jCcLixTbJ5tZbs72KLr0UbrhhnBdXmO5u+zxqokvsEeCi4Dh1TjznPohBWbn+evj612HnThODpUuTO5jG2bDBehyFltYFBt6MB/nFey0t2c8lXxgmIy4KjlPndHePLEIL2ZzjuvmFttaPPpoNHBcTg9DSOjB/vsUNyiQGScSFsq/PQhgTW8U9sbgoOE6dEjJoQg1Cd3e2C2q8E+q4CMPJJ5vynHSSCUIIEhdi/nz72bjR3EQzZtjxN75xQlpT5LuHgmiGz2Qi+z1VAhcFx6lTQgZNIL7xwTgUpqnaN/qLLoLt27MXT4odLF5s565aZa2t0+msmwgmvBI5XwzARLPs8ZYK46LgOHVIflFaoKMje/+wN7uQYtrXZzORw84qAs8/bz+FiMcM5syxYHQFW1KkUrnVyxVvEz5BuCg4Tp3S1JTrLw8xhCMqTLv+evjJT6wJXZiL/IY3wObNyaPa5s7NCsWaNfDAAxWvRM5v093cnBWJ/n5LgppsFkLARcFx6pAQJA0WQ3yTG/NmF9xEYRxmGH0ZhtkkMX06nHFGto3Fq14Fl19ecUGod0S1dnvKtbW16fr16yu9DMepWcJoy8POpFm2zF58003WlrqnJzv9rBTmzrXg8+zZpkZV1sE0HmyGXMsBajcDSUQeUtW2Qs+5peA4dcxhb2ohbnD77VZvAPDss9anKGlUm4ilmJ53nmUWhbxXb1xXVbgoOE4NMVpjurL7uVXNOujrs/tBEFassJ8kQs3BJz8JDz8MbW0mCL/4RZkXfGTkf55HbFnVAC4KjlPDhMBnU1NpKaRHlEa5fDl87nMmBoODVol81lkWRE4ijMI8cCA7F7mhwa2DKsZFwXFqgPzWC1Ojv9zgqenrs+eKbfrxdhZjQtViBLfdls0gamhIDiKL2HyDb33LsopmzLCgc7z4rEYFYTJbCAEXBcepQZLc9kmbfnxi2GjikcOyZTYHubUVjjvOsouKLQCyU9Oee86Cz0cfDQ8+WHVBZKcwtSnXjlNnZDLZ0ZhJNDQUHguZP0ISstk0iahazcFtt1kAeeNGOxZaTuSzeLG5kwJr1tiCdu6ErVtdEGoIFwXHqXJCt4diX84bGooXVBWqXi5ICCRfeCHcfbdNQAts3JitQchnwwbb+JcuhfPPt3oDkfopA55EuPvIcaqceNO6OCFXHooPjo/PWg7XKRhXCOMwDx7M9iYq1rguTkODLSjEDCapZTBZ+x3FcVFwnColbECFBCG4iqD4BpXfrmFES+yhIQv6LluWOw4zNK1LEoQzzrDMonD+0UdP2LAbp7y4KDhOFVMojtDQkNxGaDRy2j53dMALL8D69aYaGzZYzCBuKSTx61/DokUmHk1Nowc8apz87K/JbDG4KDhOlVLI7QPJ/fwLFbKFgPKItgwXXwzr1ln9QFsbrF1rLauTYgaQnY0MZhm0tMDq1TWbXuoUxkXBcSpEKdXIvb3ZYThNTWPLk0+ns4VtOQwNwb59JgiNjaYc06cnXyjEFTZtyg69ueyyunIXTfa5zHFcFBynQoRv8cESSJpyFiyGJPJdG/nEU1HtXCGzfr1ZCMVyU1tbrcHdnj0mBo2NJgYTPA7TmVhcFBxngilUNwC5Q+Hzv5GOWyWtKjz1JLzuz2HbtpHPNzTAhz9s91eudDHIYzJbCAEXBccpM/H2EsHPX6huIFQbhzhCqbOAC88UVgYH4xu40kwfmbULzG20vcCFwoDmn/8825uoudnFoM5wUXCcCaRYmmkguJP6+g7Hh62kWrbQ1XciDcBg9CfeQPSGBw7knt7YaPGF884zNWlszDatu/lmF4M6xEXBccpEvpuoszNbJxAIX87jxB+HAHMpZNLL4d57YfZLpFlBF+00MMAgUxlkKim6SbOaDJfYC1Ipy0CaOtUsg3PPhVmzssEJF4S6xEXBcSaYUHQWXErBnVTIeiipJbaq/ezdS3rtFwDoJA1AA0UKGkLhGtitt7N28N5HjlM2MhkLEHd0mEWQ35+oWGsKsPN7e4ucMzRklcivex1cd52NxDzhhJxT2umimV46yJDhkqyVANbL6Nxzs6MzXRAc3FJwnLLT3Z21Agq1rS5mJSTS0QGPP26tqTdssK6kd95JZv9+4CXSrLb34JLh+zkcc0y2X5GLgRPD/zc4ThkJmURx8jtCtLfbHh9obrbHBdNQQ0vrRx+1DqYbNljaKFhNwUsvjXhJZu6fZi2EGTMsqPxXfwXbt9dHjqUzJtxScJwy09SUW5OQ05CO7P2pU81iKOhWGhqyDqRBKfbsyVYaF+hTlJl2qVkCB7DpZ2efDU89ZQVpa9Z4ENlJxC0FxykDYQZCX5/9xMcKhFTT/DYXwWLIEQRVOzhrFnzlK7BihQnEaC2t//IvrdndtdfCBRfAn/yJPfaBN84ouKXgOCWQX4AWjkFpg23yYwaFxmaOuM7y5XD77bb5v/wyvPii1RGsWpW80EWLLIC8apXFCkKtgQuBUyIuCo5zmCS1DcovUAu1CcGF1Nw8SubR0JBt4s8/Dzt22LHp000Y8ovPAqHl9caN2dYUc+Z4ENkZMy4KjlOEQgVoIraxh2MtLbmbfNJogY6OkdZGDqr2hi+8YDUDt9xix1atMkEoxOLFcNFFds68eSYGb3mLt6ZwDptRRUFElgL/V1X3TsB6HKfqSOpTFH++WLPReGppoiBcf72Nwnz6acsiOucc2+zvuCP5wnPmWJC5o8NiB2EcpouBcwSUYinMB9aJyMPAN4CfqKqWd1mOUx2EjqVJbakh6yYKFkN+/KDo2MzBQTjlFEsvDQNuWltts0+afjZtGhw6BHv32rktLW4ZOOPGqA5HVf2fwGnAHcB7gCdE5O9F5FVlXpvjVJSQIVRMEAKFWlGEKuZMJiHFdOFCm2C2e7cJwowZ9lxPz8iLiZgAgAnC9OkwcyaceaZbB864UlJMQVVVRHYCO4EBYA7wfRG5X1U/Wc4FOk61EI8jQLaZXXNz7qafn2o6go4O+5bf35+NFYgkj8JsbMzmtV53HXzve3DaafamHkh2xhkZzRMkIh8B3gX0AP8E/JuqHhKRKcATqlrQYhCRbwBXALtU9azo2FzgLmAhsAW4SlX3iogAXwbeBLwIvEdVHx5t8W1tbbp+/fpSfk/HOWziqaehwCyfkFEERYLJqtar6KtfNWvg7LPh2WeL1xuEeoRUyoLPInYdFwPnCBCRh1S1rdBzpfzPmgu8TVUvU9XvqeohAFUdwjb9JP4ZeGPesU8BP1XV04CfRo8BLsdcVKcBVwNfLWFdjjPhtLebABQjRxBUs43rPvpR+8bf02OuoE2bkgVh2jS73bPHzp0924RAxAXBKSujWgpHdHGRhcCPY5bCb4C0qu4QkQVARlVfIyJfi+5/O/+8Ytd3S8E5HMZj+HpIVYWsSyk+G6GjA9jyNJmBi8xVdPTRJgaLFsETTxTsUTRMCCTPmGEpp5ddBjfccPiLdZw8ilkKE12nMD+20e/EMpsATgCeiZ23LTo2QhRE5GrMmuCkk04q30odZ4zkuJWefhr29MD+aO7liy+aamzcWPjFImYN9PWZIDQ2WifTBx/0ILIzoVTMDo3SWsdspqjq7arapqptxxxzTBlW5kxW4tlEoYX1qEHhBOJtr3NRmqWPzK4zyew/3yyDQNIMzhkzzM100kkWQ5g1Cz7xCfjd71wQnAlnoi2F50RkQcx9tCs6vh04MXbeKyg8Wtxxxo0wHjNO3LVUipup0D7frzOtHUVjY7JlALBkiYnBrbda3GDOHHjkkWzswHEqwERbCncD747uvxv4Uez4u8S4EOgbLZ7gOGMl1At0dGRn08erjeNxgvj9JFIpaG7ONXYbGKT9+KdNEJL6FIEJwKpVtohrr7X5BkGlXBCcClI2S0FEvg2kgVYR2QYsAz4PfFdE3g9sBa6KTr8HS0d9EktJfW+51uXUN/nFaH19lmYK2aZ1YW8eHCw8KQ2wjKLuDaT27aOTi4cPDzIVnt1OmntzR19CbiTaq5GdKqVsoqCq70x46g8KnKvANeVai+MECn37D/t0vDAt7hYa0ea6owPWrSMTZRC1sJd+mkwQijE4aDGGnTth//5sNbLjVBHeJdWpK+Kbe1eXWQfhWLAg4l/oc9pch3qDzZtzUkpTdOe8R46F8OEPw3e+Y22wGxvhyiuzQuD1Bk4V4qLg1AXBBRQ2/ubm7MYfH5qTb0kMC0JHBzz+OBx/vG3wc+faLVkRSLM698VnnWXT0pYsMWE4+mi48cZx/b0cZ7xxUXDqkqTOpSNaVaxW+Mz18OijVl28a5cVlBWaixwshCAYmzfbRebONZdRfqqT41QhLgpOXRBSTEedekYsEL1lC+nmPWRe9WMThNCHKKmldeD55+3cU0+1amSPGzg1hIuCUxek0xZDGBwc6SLKLWBTIMoEGjgE+/bZC1pbC7e0LoSIBZHDmDbHqSE80uVMekKsIJ5RNLKSWaH7EfjVr3IPT40a0yUJwvTpdjt3Lhx1lP20t8PPf+6C4NQkbik4NUsp1cdxCyHQ12fHwqQ0cxcJzbySnM4r24sU1be0QG+vzUNIpeCKKzyryJkUuCg4NU+wBPKnnxWrSs5WMmfdRSkeMctg4BDAyOKzwKJF1r5i3ryRaaaOU+O4KDg1R356aaCz06qT29tHNqxrbs7eb2+HzM+GrB11by9pboYnnySz/RIYKJBaChZTuOoqSzHduDFrHdxwg7uJnEmFi4JTMYq5fAodL4UQSM6fkGbTLCPXUHc3nPNeqz1YsQJOuMZcQREjLIQQZJ46FZYuhbVrPavImbS4KDgVI8m1U6wRXZKrKE68XUUOg4O0N20gM+2NsKEHtm2DY48ls/3Vhc8P9QY9PfaGoU8RuHXgTFpcFJwJJ2zsYfPOzwTKP55vMfT3j97BtBCDNED/PuiPMokKjcI86ih49autFiHUG3jcwKkjXBScspOfJZQfC4gLRHz+cehNFK4RPy/RGihCMyW86P3vh1tugY99DNasgUsvNTFwy8CpE1wUnAkl6Rt+oQ4Qg4O5k80KCUGoUM4XmpwiNJQGBullTvLCFi2yGMPKlbaYm282IXAxcOoMFwWnbORnCeUHfwPxzb7Qxp9Om5XR0hICxiOv09wMfX1xIchu5g0M0sSIuZlZ5s2zjCIRG3jT0uK1Bk7d4qLglI2uriO/Rhh0E//CHhcECzgrvYvTpB/4e7oOXTA816CBAQAGmFb8TfbssQyj5mZzHbl14NQx/nXIGVfS6ayFEOIBzc3mmRkYsNsjbRYaRml2dECmYxmZdU3Q1UXmUDtN9NPAAB1kaKeLdkZRpmOPhQsuyI7DdEFw6hy3FJwcjqRGIBCKyOITzeJWQyEXUpy4aAwOBtdQ7jnt7WoBige/AAcP2sEpU+gdmjNcfJZYkTxnjvUsamiAD3zAx2E6TgwXBWdcyI8fFNr4Q2wgnBvPJsqnvT3peYX+fjJ722GhwIaD2aeGhoAiYgAmBGedZQvxQLLjjMBFwQFGbuqHYzEUqx0Im3w8JTWkn8YDxw0NuW0qAi0tCgcO0LuoA55+Gjb2WMZQmHGQxOzZ8MILdl8EFiywDqaO4xTEYwrOMPFNfazFYZmMBX3jdQbBDdTRkX0+Tiplz7W32+uamwsLAsuWWW7qoQFYt84qjBsbLWOomCCACcK8eSYGn/40PPPM2H4xx6kz3FJwcgib+mjTyQoRXEPDoywzudXK8VnI8ccFj6naN/uODli3jt7BG+x4GIV54MDoC5oyxcTgfe/zAjTHKREXBafgzIHOztJdSC0tdhssgbhFUKqw5Jy3bJk1qPvSlyyo8NJL2eeSRmGKwBlnwGOP2eOpU+G44+B3v3MxcJwx4KJQ5xSaSjZW+vPqwkYTgqLPX389fP3rNugerCPp7NnZDKNCTJ9uw26mTjVLYvdusw5uvLGE1TuOE0dUdfSzqpS2tjZdv359pZdR07S02KZeqEI41k16TK/t6LDbkt1PUdYQ6bR90x8tThA4+2zYtMnut7baXOTVqz2ryHFGQUQeUtW2Qs+5pVDnpFIjUz9HKy4LbqXDaUo3go4OeOghOPpoiyPs2WOxgCAUxdi0ySyDxkZrXHfDDeOwIMepb1wU6pzwbT586y+Y/VOA0RrbjXoNVXMVrV1rQeP9++24SLIgLF5szwXrYP78bEtrtwwcZ1xwUXCArMVQjKQxmHGys4+LsGwZ3HuvxQHys4iKuTMvush6E517rsUNPvABn3HgOOOMi4IDFP9mnz8EJ4lR4xCqJgg33QQvvmjHFi2yeoMk4sVpa9eaa+nhhz1u4DhlwkXBSSQuBvERmPm9iEIVclGWL7esogMHsoIApQnCvHnwqlfB5Ze7GDhOmXFRcBLp7s7NLkpyLzU1JVgacVfQ88/Ds8/a/TD7eDRCS+szzvAOpo4zQbgo1Bn5rqBCm3lSdlFfX3bSWbHXA+Ym+slPrC31LbdYIVpnp1kGSYIQdxU1NFjx2fve51lFjjOBuCjUIcECKBYUHmvvo2FUTVUefdQ2+DVr7Pi3vjV6/cGePZZhNH06vPGNnlXkOBXARaFOKJQ51NdXuJVF6FmU3/oizggLQdXiBnv3WhO6EAvYswdWrEheWEtLNjp99NGeYuo4FcZFoY4oNB6zq6uwxRAXBsiKQ36nU4aGbBO/7z5LMe3uhiVLYNs262ZaiKlTzQ+1Z48Jwty5MG0avOY17ipynArjolAnxAff5zNio897TX5vI8DE4JJL4PHHrRNpaFTX2AirViUvpLUVduwwS+C66+B734NXv9raU0zxTu6OU2n8r3CSkU7bRh4PKIe5yUEQQtVx0kCbOKlUgXTT7kfMvPjlL2HXLhOEGTPsuaSW1vPm2W1PD3z84yYAX/4ybN9uPi0XBMepCtxSqGMGB0dvkT1iBsJFn4FNX8ltZw3JXUwXL7bbDRtMGE491WYkh5iBxw4cp6qoiCiIyBZgHzAIDKhqm4jMBe4CFgJbgKtUdW8l1leL5Hcs7ey0Y/FhOfnpqMXaVeSgCghseRr6fmwppaXUGpx9tonB0qW2+c+enZ2N7DhOVVJJS+ESVY1HIj8F/FRVPy8in4oe/4/KLK32KNTCOh4LyJ+IFo7BKM3rooE3mZ/dDB/7Mny52+ICSUFkyLau2LTJ3nDOHOuE6i4ix6l6qsl99BYgHd3/JpDBRWFUwsaeLwgNDSMrjcc0YlPV2lo/8AAMDNixL34Rvva14oIAJgihpfVll3nTOsepISoyZEdEngb2Agp8TVVvF5FeVW2Jnhdgb3ic99qrgasBTjrppHO3bt06YeuuRsIozKTZBmHmcnh+1AE4qraJ33MPPPVUae0o8ucfzJwJH/uY1xs4TpVSjUN22lV1u4gcC9wvIo/Hn1RVFZGCaqWqtwO3g01eK/9Sq5uQTpoUHyh5EE4oPuvttfvr1tnxMOoyiRBbmDvXMo+am+GDH3TrwHFqlIqIgqpuj253icgPgfOB50RkgaruEJEFwK5KrK3WCC0rgrsoxBGCOykchyLuozDf4NAhu+DSpdm4QCFBaG215nYf/zisXGkXvuKKrGXg1oHj1CwTLgoiMhOYoqr7ovuXAjcAdwPvBj4f3f5ootdWyzQ1FR6tOTiYfdzdbTGIHGHo6DCrIKSYplK20Rejpwc+8QlrdDdlilkHbhk4zqRgwmMKIvJK4IfRw6nAnar6ORGZB3wXOAnYiqWkFnVot7W16fr168u63mqlUHVyKEbLb3kdGI4n/GzIvs2rwjnnZKuRRyOehjp/vlkLbhk4Ts1RVTEFVf0tsLjA8T3AH0z0eiYjob9cCEKHuEMmgynD8b+Bt7/dvumvWwezZiUXn4mYGOzZkxs7OP10TzF1nElINaWkOiWSTttGHw8ujzoKE4XPXJ9tab1ihVkKd96ZLAihHuGd7zRxWLsWLr3UAtIuCI4zKXFRmMT09pLNKrrvPvjxy7ktrUuJHaRSZh0sX27H3FXkOJMaF4UaJT4EJ8QKRrB8uWUVHTyYjRsUq0ZevNjqDTZtssfz58Ob3+xBZMepI1wUaoj83kWJDA2ZhbB3r7l8wDb8DRuSBWHRImtFIWLB59274QMfcEFwnDrDRaGGiI/RDJlHoWI5kyE74+Chh+C000wQVM1NlJRhFFxJGzdaFfItt8DDD3tWkePUKS4KNUCwEIIQjBx6o5C+BB57zPJQ9+83BZk9OzmIDFnrYd4861MUWlq7GDhO3eKiUAPE4weQrT9oblZSLVvInP0l+N7j5vKBbGuKpIE3Z50FmzebIIRq5BtucDFwHMcnr9UCqVTCyMz+fnh2h42/PPbY7PFCrSnmz88OvNm82e5fcAFceSXceKMLguM4QJ1aCiXNEagiwjqHi9F4BPbtIzPYYWOKIJsxlMT8+bB+vfUrWrPGWlovX+5i4DhODnUpCpDQB6iaUSWVEnj6aXj2xdxW1cWYM8eykDZuhPPOM2GYMsXFwHGcgtSVKAQLIVQCd3XB1KmWzVO8Gvjw3mfcBGf5cti7l8zFzdD37/C7bpgxA4rEkIfZu9eKzw4etFSlhoZxWpTjOJORuospxIO2g4P2MzKbp0oYGrKf++6zthT//u/2C7S2Fs8qAgsmgw28+fCH4YUXasgschynUtSVpZDJmF++oSG3g+jgYNZffyQWQ74lkk6bNRIskSQLYsTxUG/wm9/AVVfB+edbHCAo2mjjMAGOOgqWLDErwQvQHMcpkboSBSg8c+BIiG/o+amj+SQ939UV3VE1MVi71oTh4EErPJs7t/iF49PRjj0WFi6Eyy+34TkeO3AcZwzUnSjkZ/IEDsdCSKdto0+lsuIQUke7uuy5MOQmvje3tOS6rILVkj7xSdj1OTKH2u1AmH1cbE5ymJA2b57FGT7wAc8qchznsKk7UQiEzXu0b/dJBEHo6zN3UXBJdXZaPDd/wE2c3AE4CtgG3rX9FOCU7IlDQ6RZTTcpUnST4ZLcC4WKZC9AcxxnnKhbUTiSmGtcEAJJU866ukY+l/s4tomL0KT7AGhhL31YY6MGYi9YvNjGq916q1kG115rpofHDRzHGQfqVhSOlPiQm3jgurnZnstkxtDVFAClXX8BQJrVw4IAwiBT6SRNC3tJbegmc/EPYOlSizV43MBxnHHERaEIhbKF4sfiMQXI3g/nh9vwmu5u4MBLcPBl+pnJ4PDHrzQwSIZLmMohBmkgx4KI6KcJps9wMXAcp2y4KOSRn03U359b+Zwfg4hbBXFBGIFa8zp69sDBfrp5Lf3MBKAdSz9KszomFCMuQPvsTWR6LwR53dh/McdxnBJwUcgjLgQhZhCvfA7H8q2IgmKgas9tOcUu+md/ZimmUV5smtX2PJcM3y9wEQA6Tt5CZstrj+h3cxzHGQ3RaOOqRdra2nT9+vXjcq38wrPRCMNtElNZwyjM886Du+6ygrMZM+yFu3YVfs2MGaQP3gdTp9Glr2dwEBoahPZ2JZNxV5HjOOODiDykqm2FnnNLIWKsqakFW1nDsHXAvfdaEdratXDNNXDHHTbfoJAgtLSYuhw8CDIFGqbQfqGJgFkgLgiO40wMddf7KIlUauxVzjkuI1WzDq67zu5fcEH2uVtvLT7wprfXis9OOIHMp+8nc+B1ZDLeqshxnInHLYWITMbiBsWKzgIjGo0uW5b1I61YkbUW5s+H554rfJGWFviLv8jGGLz4zHGcKsBFIcbAgMUWQoVyeAzZAHR7e+wbfLAO7r7bTli61IrJVqxIfpNFi2DbNmtdceedXnzmOE5V4aKQR7AY4o8hW5MwTNw6CAUKK1eO/gYbN1qM4a67rK31Lbe4deA4TtXgMYUCDAzYT5xMBnqfHzKRWLbMrINgEVx7bXKkurXVLnbNNfb4uOMsfrBzJ2zZ4oLgOE5V4ZZCKaiaqfDCCzbOsrfXRKCxMdlVdP75lk20YYPNRV6xwnxS7ipyHKeKcVEYjeXL4T/+w77V9/RAWxu8/vXmY0rKKFq82FJRly61zngtLdYG211FjuNUOS4KSQwNmYVw771mHYC5grq7k11FS5fabcgomjMnd7aBC4LjOFWOxxTyCa6i2bPh3HNz6w2KjcFctMjEQMRiDFdeaW4iFwLHcWoItxTiLFtmqaJ798L+/RYP2LbNYgeFXEWNjbBvXzZmkEqZq8gnnzmOU6O4KAQ6OuBXv7JMoSVL7NjGjbBnT+Hzg1Ccd565l0Ssr5EHkR3HqWFcFMDiB7292TzUVatGf82BAxZjmD3bsopuvtmtA8dxap76jCmENhRDQ3YrAo88YnGBYpx1VjaYfNxx8KEPZduquiA4jjMJqD9LIVQid3db3cG6dRYTaG7OikWco46Co482N9LmzWYVLF1qmUXuKnIcZ5JRX6KwbBncfrtVE7e2WjbRrFnmCpoxw4rN8nnpJXjf++AXv4CnnrJA8pe/7JaB4ziTkvoRBVWzEHbutMchvTRkFcUFYfFia5e6ebM9/v73LQtpyhT7cRzHmaRU3Q4nIm8Ukd+IyJMi8qlxvLBVFF97bfI5M2eaIDz8sKWjLlpkrqPTT7cKZhcEx3EmOVU1jlNEGoD/B/wRsA1YB7xTVR8rdP5hjeMcGiowECFi0SJ46KFsm9QQiHYxcBxnElFsHGe17XbnA0+q6m9V9WXgO8Bbxu3qQ0NWpVyI1larSzjvvFwxcEFwHKeOqLYd7wTgmdjjbdGxYUTkahFZLyLrd+/eXfqVVW1UZuhbdPzxJgSBhQutIrm52YXAcZy6peZ2P1W9XVXbVLXtmGOOKf2FIpZGesEFllK6bZsFna+91tpc//Efm+vIByM7jlPHVFv20XbgxNjjV0THxoflyy0tFUwkGhos+BweO47j1DnVZimsA04TkVNEZDrwDuDucX0HkVwByH/sOI5Tx1SVpaCqAyKyBPgJ0AB8Q1UfrfCyHMdx6oaqEgUAVb0HuKfS63Acx6lHqs195DiO41QQFwXHcRxnmKqqaB4rIrIb2Fri6a1AkXmaVUMtrNPXOH7Uwjp9jeNDNa3xZFUtmNNf06IwFkRkfVJZdzVRC+v0NY4ftbBOX+P4UAtrBHcfOY7jODFcFBzHcZxh6kkUbq/0AkqkFtbpaxw/amGdvsbxoRbWWD8xBcdxHGd06slScBzHcUbBRcFxHMcZpi5EoWwjPse+jhNFZLWIPCYij4rIR6Ljy0Vku4h0Rz9vir3mb6J1/0ZELpugdW4RkU3RWtZHx+aKyP0i8kR0Oyc6LiKyIlrjRhE5Z4LW+JrY59UtIi+IyEcr/VmKyDdEZJeIbI4dG/NnJyLvjs5/QkTePQFr/EcReTxaxw9FpCU6vlBEXop9nrfFXnNu9P/kyej3GNfOkgnrHPO/bzn//hPWeFdsfVtEpDs6XrHPckyo6qT+wRrrPQW8EpgObADOrNBaFgDnRPdnYaNHzwSWA58ocP6Z0XpnAKdEv0fDBKxzC9Cad+x/AZ+K7n8K+EJ0/03AvYAAFwJrKvRvvBM4udKfJXAxcA6w+XA/O2Au8Nvodk50f06Z13gpMDW6/4XYGhfGz8u7ztpo3RL9HpdPwGc5pn/fcv/9F1pj3vM3AddX+rMcy089WArlHfE5BlR1h6o+HN3fB/yavMlyebwF+I6qHlTVp4Ensd+nErwF+GZ0/5vAW2PH/0WNB4EWEVkwwWv7A+ApVS1W3T4hn6Wq/hx4vsB7j+Wzuwy4X1WfV9W9wP3AG8u5RlX9T1UdiB4+iM0ySSRa52xVfVBtV/uX2O9VtnUWIenft6x//8XWGH3bvwr4drFrTMRnORbqQRRGHfFZCURkIfBaYE10aElkun8juBeo3NoV+E8ReUhEro6OzVfVHdH9ncD8Cq8xzjvI/cOrps8Sxv7ZVfozfR/2bTVwiog8IiKdInJRdOyEaF2BiVzjWP59K/lZXgQ8p6pPxI5V22c5gnoQhapDRJqAfwU+qqovAF8FXgWkgB2YyVlJ2lX1HOBy4BoRuTj+ZPRtpipymcWGMV0JfC86VG2fZQ7V9NkVQkQ+DQwA34oO7QBOUtXXAh8D7hSR2ZVaH1X+75vHO8n9slJtn2VB6kEUyjvic4yIyDRMEL6lqj8AUNXnVHVQVYeAr5N1a1Rk7aq6PbrdBfwwWs9zwS0U3e6q5BpjXA48rKrPQfV9lhFj/ewqslYReQ9wBfDnkXgRuWP2RPcfwvzzr47WE3cxTdT/zbH++1bqs5wKvA24Kxyrts8yiXoQhfKP+CyRyMd4B/BrVf1S7HjcB/8nQMhkuBt4h4jMEJFTgNOwgFQ51zhTRGaF+1gAcnO0lpAF827gR7E1vivKpLkQ6Iu5SiaCnG9j1fRZxhjrZ/cT4FIRmRO5Ry6NjpUNEXkj8EngSlV9MXb8GBFpiO6/Evvcfhut8wURuTD6f/2u2O9VznWO9d+3Un//fwg8rqrDbqFq+ywTqVSEeyJ/sCyP/4cp86cruI52zHWwEeiOft4E/B9gU3T8bmBB7DWfjtb9GyYgIwHL0tgQ/TwaPi9gHvBT4Angv4C50XEBbo3WuAlom8DPcyawB2iOHavoZ4kJ1A7gEOYbfv/hfHaYX//J6Oe9E7DGJzHfe/h/eVt07p9G/w+6gYeBN8eu04Ztyk8Bq4g6JJR5nWP+9y3n33+hNUbH/xn4UN65Ffssx/LjbS4cx3GcYerBfeQ4juOUiIuC4ziOM4yLguM4jjOMi4LjOI4zjIuC4ziOM4yLguM4jjOMi4LjOI4zjIuC44wjInJe1KytMaoOf1REzqr0uhynVLx4zXHGGRH5LNAIHAVsU9V/qPCSHKdkXBQcZ5yJeuysAw4Ar1fVwQovyXFKxt1HjjP+zAOasOl6jRVei+OMCbcUHGecEZG7sQlfp2AN25ZUeEmOUzJTK70Ax5lMiMi7gEOqemfUJvlXIvL7qvqzSq/NcUrBLQXHcRxnGI8pOI7jOMO4KDiO4zjDuCg4juM4w7goOI7jOMO4KDiO4zjDuCg4juM4w7goOI7jOMP8fybiNOfgSCD0AAAAAElFTkSuQmCC\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ],
      "source": [
        "#plot the real data points in test dataset and their predictions\n",
        "predictions = predictions.reshape(1,374)\n",
        "x_test = test_sample['indexed_input'].values\n",
        "y_predictions = predictions\n",
        "l = len(y_train)\n",
        "plt.scatter(x_test,y_predictions,c='red',marker = 'x')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.title('Predictions vs Real')\n",
        "\n",
        "# x_test = test_sample['indexed_input'].values\n",
        "# y_test = test_sample['close'].values\n",
        "\n",
        "plt.scatter(x_test,y_test,c='blue',marker = '+')\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.title('Predictions vs Real')\n",
        "plt.show()\n"
      ]
    }
  ],
  "metadata": {
    "interpreter": {
      "hash": "273475548cdab866e2464847af05694adb3cb3ed7aae5690b2029765fc501279"
    },
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.0"
    },
    "pycharm": {
      "stem_cell": {
        "cell_type": "raw",
        "metadata": {
          "collapsed": false
        },
        "source": []
      }
    },
    "colab": {
      "name": "Assıgnment_1a.ipynb",
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}